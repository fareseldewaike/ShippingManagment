// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shipping.repo.ShippingCon;

#nullable disable

namespace Shipping.repo.Migrations
{
    [DbContext(typeof(ShippingContext))]
    partial class ShippingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Shipping.core.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("ApplicationUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Shipping.core.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTime = new DateTime(2024, 3, 23, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "الفرع الرئيسي",
                            isDeleted = false,
                            status = true
                        });
                });

            modelBuilder.Entity("Shipping.core.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Pickup")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Shipping.core.Models.DeliverToVillage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AdditionalCost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("DeliverToVillages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalCost = 10.0
                        });
                });

            modelBuilder.Entity("Shipping.core.Models.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Governorates");
                });

            modelBuilder.Entity("Shipping.core.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 3, 23, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "ادمن"
                        });
                });

            modelBuilder.Entity("Shipping.core.Models.GroupPermission", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PermissionId");

                    b.ToTable("GroupPermissions");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Action = "Add",
                            GroupId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            id = 2,
                            Action = "Edit",
                            GroupId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            id = 3,
                            Action = "Delete",
                            GroupId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            id = 4,
                            Action = "Show",
                            GroupId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            id = 5,
                            Action = "Add",
                            GroupId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            id = 6,
                            Action = "Edit",
                            GroupId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            id = 7,
                            Action = "Delete",
                            GroupId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            id = 8,
                            Action = "Show",
                            GroupId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            id = 9,
                            Action = "Add",
                            GroupId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            id = 10,
                            Action = "Edit",
                            GroupId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            id = 11,
                            Action = "Delete",
                            GroupId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            id = 12,
                            Action = "Show",
                            GroupId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            id = 13,
                            Action = "Add",
                            GroupId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            id = 14,
                            Action = "Edit",
                            GroupId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            id = 15,
                            Action = "Delete",
                            GroupId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            id = 16,
                            Action = "Show",
                            GroupId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            id = 17,
                            Action = "Add",
                            GroupId = 1,
                            PermissionId = 5
                        },
                        new
                        {
                            id = 18,
                            Action = "Edit",
                            GroupId = 1,
                            PermissionId = 5
                        },
                        new
                        {
                            id = 19,
                            Action = "Delete",
                            GroupId = 1,
                            PermissionId = 5
                        },
                        new
                        {
                            id = 20,
                            Action = "Show",
                            GroupId = 1,
                            PermissionId = 5
                        },
                        new
                        {
                            id = 21,
                            Action = "Add",
                            GroupId = 1,
                            PermissionId = 6
                        },
                        new
                        {
                            id = 22,
                            Action = "Edit",
                            GroupId = 1,
                            PermissionId = 6
                        },
                        new
                        {
                            id = 23,
                            Action = "Delete",
                            GroupId = 1,
                            PermissionId = 6
                        },
                        new
                        {
                            id = 24,
                            Action = "Show",
                            GroupId = 1,
                            PermissionId = 6
                        },
                        new
                        {
                            id = 25,
                            Action = "Add",
                            GroupId = 1,
                            PermissionId = 7
                        },
                        new
                        {
                            id = 26,
                            Action = "Edit",
                            GroupId = 1,
                            PermissionId = 7
                        },
                        new
                        {
                            id = 27,
                            Action = "Delete",
                            GroupId = 1,
                            PermissionId = 7
                        },
                        new
                        {
                            id = 28,
                            Action = "Show",
                            GroupId = 1,
                            PermissionId = 7
                        },
                        new
                        {
                            id = 29,
                            Action = "Add",
                            GroupId = 1,
                            PermissionId = 8
                        },
                        new
                        {
                            id = 30,
                            Action = "Edit",
                            GroupId = 1,
                            PermissionId = 8
                        },
                        new
                        {
                            id = 31,
                            Action = "Delete",
                            GroupId = 1,
                            PermissionId = 8
                        },
                        new
                        {
                            id = 32,
                            Action = "Show",
                            GroupId = 1,
                            PermissionId = 8
                        },
                        new
                        {
                            id = 33,
                            Action = "Add",
                            GroupId = 1,
                            PermissionId = 9
                        },
                        new
                        {
                            id = 34,
                            Action = "Edit",
                            GroupId = 1,
                            PermissionId = 9
                        },
                        new
                        {
                            id = 35,
                            Action = "Delete",
                            GroupId = 1,
                            PermissionId = 9
                        },
                        new
                        {
                            id = 36,
                            Action = "Show",
                            GroupId = 1,
                            PermissionId = 9
                        },
                        new
                        {
                            id = 37,
                            Action = "Add",
                            GroupId = 1,
                            PermissionId = 10
                        },
                        new
                        {
                            id = 38,
                            Action = "Edit",
                            GroupId = 1,
                            PermissionId = 10
                        },
                        new
                        {
                            id = 39,
                            Action = "Delete",
                            GroupId = 1,
                            PermissionId = 10
                        },
                        new
                        {
                            id = 40,
                            Action = "Show",
                            GroupId = 1,
                            PermissionId = 10
                        },
                        new
                        {
                            id = 41,
                            Action = "Add",
                            GroupId = 1,
                            PermissionId = 11
                        },
                        new
                        {
                            id = 42,
                            Action = "Edit",
                            GroupId = 1,
                            PermissionId = 11
                        },
                        new
                        {
                            id = 43,
                            Action = "Delete",
                            GroupId = 1,
                            PermissionId = 11
                        },
                        new
                        {
                            id = 44,
                            Action = "Show",
                            GroupId = 1,
                            PermissionId = 11
                        },
                        new
                        {
                            id = 45,
                            Action = "Add",
                            GroupId = 1,
                            PermissionId = 12
                        },
                        new
                        {
                            id = 46,
                            Action = "Edit",
                            GroupId = 1,
                            PermissionId = 12
                        },
                        new
                        {
                            id = 47,
                            Action = "Delete",
                            GroupId = 1,
                            PermissionId = 12
                        },
                        new
                        {
                            id = 48,
                            Action = "Show",
                            GroupId = 1,
                            PermissionId = 12
                        },
                        new
                        {
                            id = 49,
                            Action = "Add",
                            GroupId = 1,
                            PermissionId = 13
                        },
                        new
                        {
                            id = 50,
                            Action = "Edit",
                            GroupId = 1,
                            PermissionId = 13
                        },
                        new
                        {
                            id = 51,
                            Action = "Delete",
                            GroupId = 1,
                            PermissionId = 13
                        },
                        new
                        {
                            id = 52,
                            Action = "Show",
                            GroupId = 1,
                            PermissionId = 13
                        });
                });

            modelBuilder.Entity("Shipping.core.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("DeliverToVillage")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("MerchantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OrderShippingTotalCost")
                        .HasColumnType("float");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<double>("ProductTotalCost")
                        .HasColumnType("float");

                    b.Property<int?>("ReasonsRefusalTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("RejectionId")
                        .HasColumnType("int");

                    b.Property<string>("RepresentativeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecondPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShippingType")
                        .HasColumnType("int");

                    b.Property<int>("ShippingTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("orderStatus")
                        .HasColumnType("int");

                    b.Property<int>("orderType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("RejectionId");

                    b.HasIndex("RepresentativeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Shipping.core.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Branch"
                        },
                        new
                        {
                            Id = 2,
                            Name = "City"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Governorate"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Employee"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Representative"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Merchant"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Order"
                        },
                        new
                        {
                            Id = 8,
                            Name = "OrderReports"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Group"
                        },
                        new
                        {
                            Id = 10,
                            Name = "ReasonsRefusalType"
                        },
                        new
                        {
                            Id = 11,
                            Name = "ShippingType"
                        },
                        new
                        {
                            Id = 12,
                            Name = "DeliverToVillage"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Weight"
                        });
                });

            modelBuilder.Entity("Shipping.core.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Shipping.core.Models.Rejection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Rejections");
                });

            modelBuilder.Entity("Shipping.core.Models.RepresentativeGovernorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("RepresentativeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("RepresentativeId");

                    b.ToTable("RepresentativeGovernorates");
                });

            modelBuilder.Entity("Shipping.core.Models.SpecialPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<bool>("Isdeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MerchentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("MerchentId");

                    b.ToTable("SpecialPrices");
                });

            modelBuilder.Entity("Shipping.core.Models.Weight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AdditionalPrice")
                        .HasColumnType("float");

                    b.Property<double>("DefaultWeight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Weights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalPrice = 5.0,
                            DefaultWeight = 10.0
                        });
                });

            modelBuilder.Entity("Shipping.core.Models.Employee", b =>
                {
                    b.HasBaseType("Shipping.core.Models.ApplicationUser");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasIndex("GroupId");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("Shipping.core.Models.Merchant", b =>
                {
                    b.HasBaseType("Shipping.core.Models.ApplicationUser");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<double?>("PickUp")
                        .HasColumnType("float");

                    b.Property<double?>("ReturnerPercent")
                        .HasColumnType("float");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CityId");

                    b.HasIndex("GovernorateId");

                    b.HasDiscriminator().HasValue("Merchant");
                });

            modelBuilder.Entity("Shipping.core.Models.Representative", b =>
                {
                    b.HasBaseType("Shipping.core.Models.ApplicationUser");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Representative");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Shipping.core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Shipping.core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Shipping.core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shipping.core.Models.ApplicationUser", b =>
                {
                    b.HasOne("Shipping.core.Models.Branch", "branch")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("branch");
                });

            modelBuilder.Entity("Shipping.core.Models.City", b =>
                {
                    b.HasOne("Shipping.core.Models.Governorate", "Governorate")
                        .WithMany("Cities")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("Shipping.core.Models.GroupPermission", b =>
                {
                    b.HasOne("Shipping.core.Models.Group", "Group")
                        .WithMany("GroupPermissions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.core.Models.Permission", "Permission")
                        .WithMany("GroupPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Shipping.core.Models.Order", b =>
                {
                    b.HasOne("Shipping.core.Models.Branch", "Branch")
                        .WithMany("Orders")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Shipping.core.Models.Governorate", "Governorate")
                        .WithMany("Orders")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Shipping.core.Models.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.core.Models.Rejection", "Rejection")
                        .WithMany()
                        .HasForeignKey("RejectionId");

                    b.HasOne("Shipping.core.Models.Representative", "Representative")
                        .WithMany()
                        .HasForeignKey("RepresentativeId");

                    b.Navigation("Branch");

                    b.Navigation("Governorate");

                    b.Navigation("Merchant");

                    b.Navigation("Rejection");

                    b.Navigation("Representative");
                });

            modelBuilder.Entity("Shipping.core.Models.Product", b =>
                {
                    b.HasOne("Shipping.core.Models.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Shipping.core.Models.RepresentativeGovernorate", b =>
                {
                    b.HasOne("Shipping.core.Models.Governorate", "Governorate")
                        .WithMany()
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.core.Models.Representative", "Representative")
                        .WithMany()
                        .HasForeignKey("RepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");

                    b.Navigation("Representative");
                });

            modelBuilder.Entity("Shipping.core.Models.SpecialPrice", b =>
                {
                    b.HasOne("Shipping.core.Models.City", "City")
                        .WithMany("SpecialPrices")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.core.Models.Governorate", null)
                        .WithMany("SpecialPrices")
                        .HasForeignKey("GovernorateId");

                    b.HasOne("Shipping.core.Models.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Shipping.core.Models.Employee", b =>
                {
                    b.HasOne("Shipping.core.Models.Group", "Group")
                        .WithMany("Employees")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Shipping.core.Models.Merchant", b =>
                {
                    b.HasOne("Shipping.core.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Shipping.core.Models.Governorate", "Governorate")
                        .WithMany()
                        .HasForeignKey("GovernorateId");

                    b.Navigation("City");

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("Shipping.core.Models.Branch", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Shipping.core.Models.City", b =>
                {
                    b.Navigation("SpecialPrices");
                });

            modelBuilder.Entity("Shipping.core.Models.Governorate", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Orders");

                    b.Navigation("SpecialPrices");
                });

            modelBuilder.Entity("Shipping.core.Models.Group", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("GroupPermissions");
                });

            modelBuilder.Entity("Shipping.core.Models.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Shipping.core.Models.Permission", b =>
                {
                    b.Navigation("GroupPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
